generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model TestRecord {
  id      Int    @id @default(autoincrement())
  title   String
  content String
  user    User   @relation(fields: [userId], references: [id])
  userId  String
}

model User {
  id String @id @unique

  name  String
  email String @unique

  testRecords TestRecord[]

  authSession Session[]
  key         Key[]

  stats      UserStats?
  taskBoards TaskBoard[]
  usersItems UsersItems[]

  leadedGuild Guild[] @relation(name: "leader")

  guild    Guild?        @relation(fields: [guildId], references: [id])
  guildId  String?
  messages ChatMessage[]
}

model UserStats {
  id Int @id @default(autoincrement())

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @unique

  health     Int @default(0)
  experience Int @default(0)
  coins      Int @default(0)

  class   CharacterClass @relation(fields: [classId], references: [id])
  classId Int

  avatarBody     AvatarLayer @relation(name: "body", fields: [avatarBodyId], references: [id])
  avatarBodyId   Int
  avatarEyes     AvatarLayer @relation(name: "eyes", fields: [avatarEyesId], references: [id])
  avatarEyesId   Int
  avatarOutfit   AvatarLayer @relation(name: "outfit", fields: [avatarOutfitId], references: [id])
  avatarOutfitId Int
}

model CharacterClass {
  id Int @id @default(autoincrement())

  name String @unique

  userStats UserStats[]
}

model AvatarLayer {
  id Int @id @default(autoincrement())

  fileName String @unique
  type     Int

  userStatsBody   UserStats[] @relation(name: "body")
  userStatsEyes   UserStats[] @relation(name: "eyes")
  userStatsOutfit UserStats[] @relation(name: "outfit")
}

model Task {
  id String @id @default(uuid())

  title       String
  description String?

  durationEnabled Boolean   @default(false)
  start           DateTime? @default(now())
  end             DateTime? @default(now())

  done Boolean @default(false)

  priority        PriorityLevel? @relation(fields: [priorityLevelId], references: [id])
  priorityLevelId Int?

  category   TaskCategory? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  board   TaskBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId String
}

model PriorityLevel {
  id Int @id @default(autoincrement())

  name  String @unique
  tasks Task[]
  level Int
}

model TaskCategory {
  id Int @id @default(autoincrement())

  name  String
  color String
  tasks Task[]
}

model TaskBoard {
  id String @id @default(uuid())

  name String

  user   User   @relation(fields: [userId], references: [id])
  userId String
  tasks  Task[]
}

model ItemType {
  id Int @id @default(autoincrement())

  name  String @unique
  items Item[]
}

model Item {
  id Int @id @default(autoincrement())

  name        String  @unique
  description String?
  fileName    String
  cost        Int     @default(0)

  type       ItemType @relation(fields: [itemTypeId], references: [id])
  itemTypeId Int

  usersItems UsersItems[]
}

model UsersItems {
  id     Int     @id @default(autoincrement())
  user   User?   @relation(fields: [userId], references: [id])
  item   Item?   @relation(fields: [itemId], references: [id])
  userId String?
  itemId Int?
}

model Guild {
  id String @id @default(uuid())

  leader   User   @relation(name: "leader", fields: [leaderId], references: [id])
  leaderId String

  name  String
  level Int    @default(1)

  users    User[]
  messages ChatMessage[]

  createdAt DateTime @default(now())
}

model ChatMessage {
  id Int @id @default(autoincrement())

  text String

  user    User   @relation(fields: [userId], references: [id])
  guild   Guild  @relation(fields: [guildId], references: [id])
  userId  String
  guildId String

  createdAt DateTime @default(now())
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
}
